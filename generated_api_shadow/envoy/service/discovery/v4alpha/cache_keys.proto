syntax = "proto3";

package envoy.service.discovery.v4alpha;

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";

option java_package = "io.envoyproxy.envoy.service.discovery.v4alpha";
option java_outer_classname = "CacheKeysProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: Discovery Resource Cache Key Constraints]

// The cache key for each xDS resource contains the resource's name and a map of
// key/value pairs. This message represents a set of constraints on those
// key/value pairs that can be used when subscribing to a resource. This
// allows xDS servers and caching proxies to determine which variant of a
// resource is appropriate for a given client.
message CacheKeyConstraints {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.discovery.v3.CacheKeyConstraints";

  message Constraint {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.service.discovery.v3.CacheKeyConstraints.Constraint";

    // A list of one or more integer ranges.
    // A value is considered to match if it falls in any of the ranges.
    message IntegerRangeList {
      option (udpa.annotations.versioning).previous_message_type =
          "envoy.service.discovery.v3.CacheKeyConstraints.Constraint.IntegerRangeList";

      // At least one of *min_value* or *max_value* must be set.
      message Range {
        option (udpa.annotations.versioning).previous_message_type =
            "envoy.service.discovery.v3.CacheKeyConstraints.Constraint.IntegerRangeList.Range";

        // If specified, value may not be less than this.
        uint64 min_value = 1;

        // If specified, value may not be greater than this.
        uint64 max_value = 2;
      }

      repeated Range range = 1;
    }

    message Exists {
      option (udpa.annotations.versioning).previous_message_type =
          "envoy.service.discovery.v3.CacheKeyConstraints.Constraint.Exists";
    }

    oneof constraint {
      // The cache key must have this specific value.
      string value = 1;

      // The cache key's value must be integers and within one of the ranges in this list.
      IntegerRangeList integer_range_list = 2;

      // The cache key exists.
      Exists exists = 3;
    }

    // If true, the constraint is inverted (i.e., logical-not of the constraint).
    bool invert = 4;
  }

  // The name of the cache key.
  string key = 1;

  // A list of one or more constraints on the value of the cache key.
  // All constraints must be met.
  repeated Constraint constraints = 2;

  // If specified, the cache key is optional (i.e., a cache entry will match
  // even if it does not have the specified cache key).
  bool is_optional = 3;
}

message ResourceCacheKeyConstraints {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.discovery.v3.ResourceCacheKeyConstraints";

  // Cache key constraints to be used for a given resource type.
  message ResourceTypeCacheKeyConstraints {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.service.discovery.v3.ResourceCacheKeyConstraints.ResourceTypeCacheKeyConstraints";

    repeated CacheKeyConstraints cache_key_constraints = 1;
  }

  // Key is resource type name (e.g., "envoy.config.cluster.v3.Cluster").
  map<string, ResourceTypeCacheKeyConstraints> resource_type_cache_key_constraints = 1;
}
